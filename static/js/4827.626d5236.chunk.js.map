{"version":3,"file":"static/js/4827.626d5236.chunk.js","mappings":"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","sources":["../node_modules/workbox-core/_private/Deferred.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/workbox-core/models/messages/messageGenerator.js","../node_modules/workbox-core/_private/WorkboxError.js","../node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","../node_modules/workbox-core/_private/cacheNames.js","../node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","../node_modules/workbox-core/_private/dontWaitFor.js","../node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","../node_modules/workbox-core/_private/getFriendlyURL.js","../node_modules/workbox-core/_private/logger.js","../node_modules/workbox-core/_private/timeout.js","../node_modules/workbox-core/_private/waitUntil.js","../node_modules/workbox-core/_version.js","../node_modules/workbox-core/copyResponse.js","../node_modules/workbox-core/models/quotaErrorCallbacks.js","../node_modules/workbox-core/registerQuotaErrorCallback.js","../node_modules/workbox-expiration/_version.js","../node_modules/workbox-precaching/_version.js","../node_modules/workbox-routing/RegExpRoute.js","../node_modules/workbox-routing/Route.js","../node_modules/workbox-routing/Router.js","../node_modules/workbox-routing/_version.js","../node_modules/workbox-routing/registerRoute.js","../node_modules/workbox-routing/utils/constants.js","../node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","../node_modules/workbox-routing/utils/normalizeHandler.js","../node_modules/workbox-strategies/Strategy.js","../node_modules/workbox-strategies/StrategyHandler.js","../node_modules/workbox-strategies/_version.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/workbox-core/clientsClaim.js","../node_modules/idb/build/esm/wrap-idb-value.js","../node_modules/idb/build/esm/index.js","../node_modules/workbox-expiration/models/CacheTimestampsModel.js","../node_modules/workbox-expiration/CacheExpiration.js","../node_modules/workbox-expiration/ExpirationPlugin.js","../node_modules/workbox-precaching/utils/createCacheKey.js","../node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js","../node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js","../node_modules/workbox-precaching/PrecacheStrategy.js","../node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","../node_modules/workbox-precaching/PrecacheController.js","../node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","../node_modules/workbox-precaching/utils/generateURLVariations.js","../node_modules/workbox-precaching/PrecacheRoute.js","../node_modules/workbox-precaching/createHandlerBoundToURL.js","../node_modules/workbox-precaching/precacheAndRoute.js","../node_modules/workbox-precaching/precache.js","../node_modules/workbox-precaching/addRoute.js","../node_modules/workbox-routing/NavigationRoute.js","../node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","../node_modules/workbox-strategies/CacheFirst.js","../node_modules/workbox-strategies/CacheOnly.js","../node_modules/workbox-strategies/NetworkFirst.js","../node_modules/workbox-strategies/StaleWhileRevalidate.js","../node_modules/workbox-strategies/NetworkOnly.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nlet supportStatus;\n/**\n * A utility function that determines whether the current browser supports\n * constructing a new `Response` from a `response.body` stream.\n *\n * @return {boolean} `true`, if the current browser can successfully\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\n *\n * @private\n */\nfunction canConstructResponseFromBodyStream() {\n    if (supportStatus === undefined) {\n        const testResponse = new Response('');\n        if ('body' in testResponse) {\n            try {\n                new Response(testResponse.body);\n                supportStatus = true;\n            }\n            catch (error) {\n                supportStatus = false;\n            }\n        }\n        supportStatus = false;\n    }\n    return supportStatus;\n}\nexport { canConstructResponseFromBodyStream };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A utility method that makes it easier to use `event.waitUntil` with\n * async functions and return the result.\n *\n * @param {ExtendableEvent} event\n * @param {Function} asyncFn\n * @return {Function}\n * @private\n */\nfunction waitUntil(event, asyncFn) {\n    const returnPromise = asyncFn();\n    event.waitUntil(returnPromise);\n    return returnPromise;\n}\nexport { waitUntil };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:6.5.2'] && _();\n}\ncatch (e) { }\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:precaching:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:6.5.2'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:6.5.2'] && _();\n}\ncatch (e) { }\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Claim any currently available clients once the service worker\n * becomes active. This is normally used in conjunction with `skipWaiting()`.\n *\n * @memberof workbox-core\n */\nfunction clientsClaim() {\n    self.addEventListener('activate', () => self.clients.claim());\n}\nexport { clientsClaim };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport '../_version.js';\n// Name of the search parameter used to store revision info.\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\n/**\n * Converts a manifest entry into a versioned URL suitable for precaching.\n *\n * @param {Object|string} entry\n * @return {string} A URL with versioning info.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function createCacheKey(entry) {\n    if (!entry) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If a precache manifest entry is a string, it's assumed to be a versioned\n    // URL, like '/app.abcd1234.js'. Return as-is.\n    if (typeof entry === 'string') {\n        const urlObject = new URL(entry, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    const { revision, url } = entry;\n    if (!url) {\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\n    }\n    // If there's just a URL and no revision, then it's also assumed to be a\n    // versioned URL.\n    if (!revision) {\n        const urlObject = new URL(url, location.href);\n        return {\n            cacheKey: urlObject.href,\n            url: urlObject.href,\n        };\n    }\n    // Otherwise, construct a properly versioned URL using the custom Workbox\n    // search parameter along with the revision info.\n    const cacheKeyURL = new URL(url, location.href);\n    const originalURL = new URL(url, location.href);\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\n    return {\n        cacheKey: cacheKeyURL.href,\n        url: originalURL.href,\n    };\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                if (state &&\n                    state.originalRequest &&\n                    state.originalRequest instanceof Request) {\n                    // TODO: `state` should never be undefined...\n                    const url = state.originalRequest.url;\n                    if (cachedResponse) {\n                        this.notUpdatedURLs.push(url);\n                    }\n                    else {\n                        this.updatedURLs.push(url);\n                    }\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            // Params is type any, can't change right now.\n            /* eslint-disable */\n            const cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            /* eslint-enable */\n            return cacheKey\n                ? new Request(cacheKey, { headers: request.headers })\n                : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A {@link workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * {@link workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork =\n            options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (response) {\n            return response;\n        }\n        // If this is an `install` event for an entry that isn't already cached,\n        // then populate the cache.\n        if (handler.event && handler.event.type === 'install') {\n            return await this._handleInstall(request, handler);\n        }\n        // Getting here means something went wrong. An entry that should have been\n        // precached wasn't found in the cache.\n        return await this._handleFetch(request, handler);\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        const params = (handler.params || {});\n        // Fall back to the network if we're configured to do so.\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network.`);\n            }\n            const integrityInManifest = params.integrity;\n            const integrityInRequest = request.integrity;\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\n            response = await handler.fetch(new Request(request, {\n                integrity: integrityInRequest || integrityInManifest,\n            }));\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\n            // that the response matches the precache manifest's expectations,\n            // and there's either a) no integrity property in the incoming request\n            // or b) there is an integrity, and it matches the precache manifest.\n            // See https://github.com/GoogleChrome/workbox/issues/2858\n            if (integrityInManifest && noIntegrityConflict) {\n                this._useDefaultCacheabilityPluginIfNeeded();\n                const wasCached = await handler.cachePut(request, response.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    if (wasCached) {\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\n                            `was used to \"repair\" the precache.`);\n                    }\n                }\n            }\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    },\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    },\n};\nexport { PrecacheStrategy };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { PrecacheController } from '../PrecacheController.js';\nimport '../_version.js';\nlet precacheController;\n/**\n * @return {PrecacheController}\n * @private\n */\nexport const getOrCreatePrecacheController = () => {\n    if (!precacheController) {\n        precacheController = new PrecacheController();\n    }\n    return precacheController;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\n * Performs efficient precaching of assets.\n *\n * @memberof workbox-precaching\n */\nclass PrecacheController {\n    /**\n     * Create a new PrecacheController.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] The cache to use for precaching.\n     * @param {string} [options.plugins] Plugins to use when precaching as well\n     * as responding to fetch events for precached assets.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\n        this._urlsToCacheKeys = new Map();\n        this._urlsToCacheModes = new Map();\n        this._cacheKeysToIntegrities = new Map();\n        this._strategy = new PrecacheStrategy({\n            cacheName: cacheNames.getPrecacheName(cacheName),\n            plugins: [\n                ...plugins,\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\n            ],\n            fallbackToNetwork,\n        });\n        // Bind the install and activate methods to the instance.\n        this.install = this.install.bind(this);\n        this.activate = this.activate.bind(this);\n    }\n    /**\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\n     * used to cache assets and respond to fetch events.\n     */\n    get strategy() {\n        return this._strategy;\n    }\n    /**\n     * Adds items to the precache list, removing any duplicates and\n     * stores the files in the\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n     * worker installs.\n     *\n     * This method can be called multiple times.\n     *\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n     */\n    precache(entries) {\n        this.addToCacheList(entries);\n        if (!this._installAndActiveListenersAdded) {\n            self.addEventListener('install', this.install);\n            self.addEventListener('activate', this.activate);\n            this._installAndActiveListenersAdded = true;\n        }\n    }\n    /**\n     * This method will add items to the precache list, removing duplicates\n     * and ensuring the information is valid.\n     *\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\n     *     Array of entries to precache.\n     */\n    addToCacheList(entries) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArray(entries, {\n                moduleName: 'workbox-precaching',\n                className: 'PrecacheController',\n                funcName: 'addToCacheList',\n                paramName: 'entries',\n            });\n        }\n        const urlsToWarnAbout = [];\n        for (const entry of entries) {\n            // See https://github.com/GoogleChrome/workbox/issues/2259\n            if (typeof entry === 'string') {\n                urlsToWarnAbout.push(entry);\n            }\n            else if (entry && entry.revision === undefined) {\n                urlsToWarnAbout.push(entry.url);\n            }\n            const { cacheKey, url } = createCacheKey(entry);\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n            if (this._urlsToCacheKeys.has(url) &&\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n                    firstEntry: this._urlsToCacheKeys.get(url),\n                    secondEntry: cacheKey,\n                });\n            }\n            if (typeof entry !== 'string' && entry.integrity) {\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                        url,\n                    });\n                }\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n            }\n            this._urlsToCacheKeys.set(url, cacheKey);\n            this._urlsToCacheModes.set(url, cacheMode);\n            if (urlsToWarnAbout.length > 0) {\n                const warningMessage = `Workbox is precaching URLs without revision ` +\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\n                    `Learn more at https://bit.ly/wb-precache`;\n                if (process.env.NODE_ENV === 'production') {\n                    // Use console directly to display this warning without bloating\n                    // bundle sizes by pulling in all of the logger codebase in prod.\n                    console.warn(warningMessage);\n                }\n                else {\n                    logger.warn(warningMessage);\n                }\n            }\n        }\n    }\n    /**\n     * Precaches new and updated assets. Call this method from the service worker\n     * install event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.InstallResult>}\n     */\n    install(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const installReportPlugin = new PrecacheInstallReportPlugin();\n            this.strategy.plugins.push(installReportPlugin);\n            // Cache entries one at a time.\n            // See https://github.com/GoogleChrome/workbox/issues/2528\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\n                const cacheMode = this._urlsToCacheModes.get(url);\n                const request = new Request(url, {\n                    integrity,\n                    cache: cacheMode,\n                    credentials: 'same-origin',\n                });\n                await Promise.all(this.strategy.handleAll({\n                    params: { cacheKey },\n                    request,\n                    event,\n                }));\n            }\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\n            if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n            }\n            return { updatedURLs, notUpdatedURLs };\n        });\n    }\n    /**\n     * Deletes assets that are no longer present in the current precache manifest.\n     * Call this method from the service worker activate event.\n     *\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\n     * to call it yourself in your event handlers.\n     *\n     * @param {ExtendableEvent} event\n     * @return {Promise<workbox-precaching.CleanupResult>}\n     */\n    activate(event) {\n        // waitUntil returns Promise<any>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return waitUntil(event, async () => {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            const currentlyCachedRequests = await cache.keys();\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\n            const deletedURLs = [];\n            for (const request of currentlyCachedRequests) {\n                if (!expectedCacheKeys.has(request.url)) {\n                    await cache.delete(request);\n                    deletedURLs.push(request.url);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n            }\n            return { deletedURLs };\n        });\n    }\n    /**\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\n     * into account the revision information for the URL.\n     *\n     * @return {Map<string, string>} A URL to cache key mapping.\n     */\n    getURLsToCacheKeys() {\n        return this._urlsToCacheKeys;\n    }\n    /**\n     * Returns a list of all the URLs that have been precached by the current\n     * service worker.\n     *\n     * @return {Array<string>} The precached URLs.\n     */\n    getCachedURLs() {\n        return [...this._urlsToCacheKeys.keys()];\n    }\n    /**\n     * Returns the cache key used for storing a given URL. If that URL is\n     * unversioned, like `/index.html', then the cache key will be the original\n     * URL with a search parameter appended to it.\n     *\n     * @param {string} url A URL whose cache key you want to look up.\n     * @return {string} The versioned URL that corresponds to a cache key\n     * for the original URL, or undefined if that URL isn't precached.\n     */\n    getCacheKeyForURL(url) {\n        const urlObject = new URL(url, location.href);\n        return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\n     * @param {string} url A cache key whose SRI you want to look up.\n     * @return {string} The subresource integrity associated with the cache key,\n     * or undefined if it's not set.\n     */\n    getIntegrityForCacheKey(cacheKey) {\n        return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\n     * This acts as a drop-in replacement for\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\n     * with the following differences:\n     *\n     * - It knows what the name of the precache is, and only checks in that cache.\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\n     * and it will automatically look up the correct cache key for the currently\n     * active revision of that URL.\n     *\n     * E.g., `matchPrecache('index.html')` will find the correct precached\n     * response for the currently active service worker, even if the actual cache\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\n     *\n     * @param {string|Request} request The key (without revisioning parameters)\n     * to look up in the precache.\n     * @return {Promise<Response|undefined>}\n     */\n    async matchPrecache(request) {\n        const url = request instanceof Request ? request.url : request;\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (cacheKey) {\n            const cache = await self.caches.open(this.strategy.cacheName);\n            return cache.match(cacheKey);\n        }\n        return undefined;\n    }\n    /**\n     * Returns a function that looks up `url` in the precache (taking into\n     * account revision information), and returns the corresponding `Response`.\n     *\n     * @param {string} url The precached URL which will be used to lookup the\n     * `Response`.\n     * @return {workbox-routing~handlerCallback}\n     */\n    createHandlerBoundToURL(url) {\n        const cacheKey = this.getCacheKeyForURL(url);\n        if (!cacheKey) {\n            throw new WorkboxError('non-precached-url', { url });\n        }\n        return (options) => {\n            options.request = new Request(url);\n            options.params = Object.assign({ cacheKey }, options.params);\n            return this.strategy.handle(options);\n        };\n    }\n}\nexport { PrecacheController };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Removes any URL search parameters that should be ignored.\n *\n * @param {URL} urlObject The original URL.\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\n * each search parameter name. Matches mean that the search parameter should be\n * ignored.\n * @return {URL} The URL with any ignored search parameters removed.\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\n    // Convert the iterable into an array at the start of the loop to make sure\n    // deletion doesn't mess up iteration.\n    for (const paramName of [...urlObject.searchParams.keys()]) {\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\n            urlObject.searchParams.delete(paramName);\n        }\n    }\n    return urlObject;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of {@link workbox-routing.Route} that takes a\n * {@link workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof workbox-precaching\n * @extends workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request, }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    const integrity = precacheController.getIntegrityForCacheKey(cacheKey);\n                    return { cacheKey, integrity };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` + getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Helper function that calls\n * {@link PrecacheController#createHandlerBoundToURL} on the default\n * {@link PrecacheController} instance.\n *\n * If you are creating your own {@link PrecacheController}, then call the\n * {@link PrecacheController#createHandlerBoundToURL} on that instance,\n * instead of using this function.\n *\n * @param {string} url The precached URL which will be used to lookup the\n * `Response`.\n * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\n * response from the network if there's a precache miss.\n * @return {workbox-routing~handlerCallback}\n *\n * @memberof workbox-precaching\n */\nfunction createHandlerBoundToURL(url) {\n    const precacheController = getOrCreatePrecacheController();\n    return precacheController.createHandlerBoundToURL(url);\n}\nexport { createHandlerBoundToURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { addRoute } from './addRoute.js';\nimport { precache } from './precache.js';\nimport './_version.js';\n/**\n * This method will add entries to the precache list and add a route to\n * respond to fetch events.\n *\n * This is a convenience method that will call\n * {@link workbox-precaching.precache} and\n * {@link workbox-precaching.addRoute} in a single call.\n *\n * @param {Array<Object|string>} entries Array of entries to precache.\n * @param {Object} [options] See the\n * {@link workbox-precaching.PrecacheRoute} options.\n *\n * @memberof workbox-precaching\n */\nfunction precacheAndRoute(entries, options) {\n    precache(entries);\n    addRoute(options);\n}\nexport { precacheAndRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * Adds items to the precache list, removing any duplicates and\n * stores the files in the\n * {@link workbox-core.cacheNames|\"precache cache\"} when the service\n * worker installs.\n *\n * This method can be called multiple times.\n *\n * Please note: This method **will not** serve any of the cached files for you.\n * It only precaches files. To respond to a network request you call\n * {@link workbox-precaching.addRoute}.\n *\n * If you have a single array of files to precache, you can just call\n * {@link workbox-precaching.precacheAndRoute}.\n *\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\n *\n * @memberof workbox-precaching\n */\nfunction precache(entries) {\n    const precacheController = getOrCreatePrecacheController();\n    precacheController.precache(entries);\n}\nexport { precache };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { registerRoute } from 'workbox-routing/registerRoute.js';\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport { PrecacheRoute } from './PrecacheRoute.js';\nimport './_version.js';\n/**\n * Add a `fetch` listener to the service worker that will\n * respond to\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\n * with precached assets.\n *\n * Requests for assets that aren't precached, the `FetchEvent` will not be\n * responded to, allowing the event to fall through to other `fetch` event\n * listeners.\n *\n * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}\n * options.\n *\n * @memberof workbox-precaching\n */\nfunction addRoute(options) {\n    const precacheController = getOrCreatePrecacheController();\n    const precacheRoute = new PrecacheRoute(precacheController, options);\n    registerRoute(precacheRoute);\n}\nexport { addRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' ` + `cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/reference/workbox-strategies/#type-StaleWhileRevalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n"],"names":["Deferred","this","promise","Promise","resolve","reject","_wrapNativeSuper","Class","_cache","Map","undefined","fn","Function","toString","call","indexOf","TypeError","has","get","set","Wrapper","construct","arguments","getPrototypeOf","constructor","prototype","Object","create","value","enumerable","writable","configurable","setPrototypeOf","messageGenerator","code","msg","args","length","JSON","stringify","WorkboxError","errorCode","details","message","name","Error","stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","assign","ignoreSearch","keys","cacheKeys","cacheKey","strippedCacheKeyURL","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","join","cacheNames","updateDetails","eachCacheNameDetail","key","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getRuntimeName","getSuffix","supportStatus","canConstructResponseFromBodyStream","testResponse","Response","body","error","dontWaitFor","then","executeQuotaErrorCallbacks","process","quotaErrorCallbacks","callback","getFriendlyURL","String","location","replace","RegExp","origin","logger","timeout","ms","setTimeout","waitUntil","event","asyncFn","returnPromise","self","_","e","copyResponse","response","modifier","responseURL","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","blob","Set","registerQuotaErrorCallback","RegExpRoute","regExp","handler","method","result","exec","index","slice","Route","defaultMethod","normalizeHandler","catchHandler","Router","_routes","_defaultHandlerMap","addEventListener","responsePromise","handleRequest","respondWith","data","type","payload","requestPromises","all","urlsToCache","map","entry","Request","ports","postMessage","protocol","startsWith","sameOrigin","findMatchingRoute","params","route","handle","err","_catchHandler","catch","routes","matchResult","Array","isArray","push","routeIndex","splice","registerRoute","capture","captureUrl","moduleName","funcName","paramName","getOrCreateDefaultRouter","defaultRouter","addFetchListener","addCacheListener","Strategy","options","plugins","fetchOptions","handleAll","FetchEvent","StrategyHandler","responseDone","_getResponse","_awaitComplete","runCallbacks","_handle","iterateCallbacks","doneWaiting","destroy","toRequest","input","strategy","_cacheKeys","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","_pluginStateMap","plugin","mode","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","cb","thrownErrorMessage","pluginFilteredRequest","fetch","fetchResponse","responseClone","cachePut","getCacheKey","effectiveRequest","multiMatchOptions","caches","cachedResponse","vary","_ensureResponseSafeToCache","responseToCache","open","hasCacheUpdateCallback","oldResponse","put","newResponse","state","statefulCallback","statefulParam","shift","pluginsUsed","_classCallCheck","instance","Constructor","_construct","Parent","Reflect","bind","a","apply","_defineProperties","target","props","i","descriptor","defineProperty","_createClass","protoProps","staticProps","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","F","s","n","done","_e","f","normalCompletion","didErr","step","next","_e2","_possibleConstructorReturn","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","isNativeReflectConstruct","Super","NewTarget","_getPrototypeOf","__proto__","_inherits","subClass","superClass","_isNativeReflectConstruct","sham","Proxy","Boolean","valueOf","_setPrototypeOf","p","clientsClaim","clients","claim","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","unwrap","storeNames","tx","sort","transformCachableValue","unlisten","removeEventListener","complete","DOMException","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","IDBRequest","success","promisifyRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","indexedDB","openPromise","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","storeName","store","oldTraps","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","hash","CacheTimestampsModel","_db","_cacheName","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDb","deleteDatabase","deleteDB","timestamp","id","_getId","getDb","durability","minTimestamp","maxCount","openCursor","cursor","entriesToDelete","entriesNotDeletedCount","urlsDeleted","_upgradeDbAndDeleteOldDbs","CacheExpiration","config","_isRunning","_rerunRequested","_maxEntries","maxEntries","_maxAgeSeconds","maxAgeSeconds","_matchOptions","_timestampModel","Date","now","expireEntries","urlsExpired","setTimestamp","getTimestamp","expireOlderThan","Infinity","ExpirationPlugin","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","updateTimestamp","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","deleteCacheAndMetadata","dateHeaderTimestamp","_getDateHeaderTimestamp","dateHeader","headerTime","getTime","isNaN","createCacheKey","urlObject","revision","cacheKeyURL","originalURL","PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","_precacheController","getCacheKeyForURL","PrecacheStrategy","_fallbackToNetwork","fallbackToNetwork","copyRedirectedCacheableResponsesPlugin","cacheMatch","_handleInstall","_handleFetch","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","_useDefaultCacheabilityPluginIfNeeded","defaultPluginIndex","cacheWillUpdatePluginCount","entries","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","redirected","PrecacheController","_urlsToCacheKeys","_urlsToCacheModes","_cacheKeysToIntegrities","install","activate","addToCacheList","_installAndActiveListenersAdded","urlsToWarnAbout","cacheMode","firstEntry","secondEntry","warningMessage","console","warn","installReportPlugin","credentials","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","getOrCreatePrecacheController","removeIgnoredSearchParams","ignoreURLParametersMatching","test","generateURLVariations","directoryIndex","cleanURLs","urlManipulation","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","PrecacheRoute","urlsToCacheKeys","getURLsToCacheKeys","possibleURL","getIntegrityForCacheKey","createHandlerBoundToURL","precacheAndRoute","precacheRoute","addRoute","cacheOkAndOpaquePlugin","StaleWhileRevalidate","unshift","fetchAndCachePromise","fetchAndCachePut"],"sourceRoot":""}