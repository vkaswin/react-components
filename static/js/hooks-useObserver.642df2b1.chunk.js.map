{"version":3,"file":"static/js/hooks-useObserver.642df2b1.chunk.js","mappings":"sMAEaA,EAAc,WACzB,IAAIC,GAAcC,EAAAA,EAAAA,UAElB,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAKC,EAAL,KAAgBC,EAAhB,KAEMC,EAAU,CAAEC,KAAM,KAAMC,WAAY,MAAOC,UAAW,IAE5DC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAW,IAAIC,qBAAqBC,EAAgBP,GAIxD,OAHIL,EAAYa,SACdH,EAASI,QAAQd,EAAYa,SAExB,WACDb,EAAYa,SACdH,EAASK,UAAUf,EAAYa,YAGlC,IAEH,IAAMD,EAAiB,SAAC,GAAa,IAAZI,GAAW,eAClCZ,EAAaY,EAAMC,iBAGrB,MAAO,CAAEjB,YAAAA,EAAaG,UAAAA","sources":["hooks/useObserver.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport const useObserver = () => {\n  let observerRef = useRef();\n\n  let [isVisible, setIsVisible] = useState(false);\n\n  const options = { root: null, rootMargin: \"0px\", threshold: 1 };\n\n  useEffect(() => {\n    let observer = new IntersectionObserver(handleObserver, options);\n    if (observerRef.current) {\n      observer.observe(observerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observer.unobserve(observerRef.current);\n      }\n    };\n  }, []);\n\n  const handleObserver = ([event]) => {\n    setIsVisible(event.isIntersecting);\n  };\n\n  return { observerRef, isVisible };\n};\n"],"names":["useObserver","observerRef","useRef","useState","isVisible","setIsVisible","options","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","handleObserver","current","observe","unobserve","event","isIntersecting"],"sourceRoot":""}