{"version":3,"file":"static/js/hooks-useForm.1ab13648.chunk.js","mappings":"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","sources":["hooks/useForm.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\n\nexport const useForm = () => {\n  const formFields = useRef([]);\n\n  const validate = useRef(false);\n\n  const formFieldsByName = useRef([]);\n\n  const [errors, setErrors] = useState({});\n\n  useEffect(() => {\n    document.addEventListener(\"input\", handleChange);\n    return () => document.removeEventListener(\"input\", handleChange);\n  }, []);\n\n  const register = useCallback(\n    ({\n        required = false,\n        minLength = null,\n        maxLength = null,\n        isNumber = false,\n        pattern = null,\n      }) =>\n      (ref) => {\n        if ((!ref && !ref?.name) || formFieldsByName.current.includes(ref.name))\n          return;\n        formFields.current.push({\n          rules: { required, minLength, maxLength, isNumber, pattern },\n          ref,\n          name: ref.name,\n        });\n        formFieldsByName.current.push(ref.name);\n      },\n    []\n  );\n\n  const handleChange = ({ target: { name, value } }) => {\n    if (!validate.current) return;\n\n    const formError = handleValidate({ name, value });\n\n    if (Object.keys(formError).length === 0) {\n      setErrors((prev) => {\n        delete prev[name];\n        return { ...prev };\n      });\n    } else {\n      setErrors((prev) => {\n        return { ...prev, ...formError };\n      });\n    }\n  };\n\n  const handleSubmit = (cb) => () => {\n    validate.current = true;\n\n    const formErrors = formFields.current.reduce(\n      (initial, { name, ref: { value } }) => {\n        return { ...initial, ...handleValidate({ name, value }) };\n      },\n      {}\n    );\n\n    setErrors((prev) => {\n      if (Object.keys(formErrors).length === 0) {\n        let data = {};\n\n        formFields.current.forEach(\n          ({ rules: { isNumber }, ref: { value }, name }) => {\n            data[name] = isNumber ? parseInt(value) : value;\n          }\n        );\n\n        cb(data);\n      }\n      return { ...prev, ...formErrors };\n    });\n  };\n\n  const handleValidate = ({ name, value }) => {\n    const formError = {};\n\n    const {\n      rules: {\n        required = null,\n        minLength = null,\n        maxLength = null,\n        pattern = null,\n      } = {},\n      ref = null,\n    } =\n      formFields.current.find(({ name: fieldName }) => fieldName === name) ??\n      {};\n\n    if (ref === null) return;\n\n    if (required && String(value).trim() == \"\") {\n      formError[name] = { type: \"required\", ref };\n      return formError;\n    }\n    if (minLength && String(value.length).trim() < minLength) {\n      formError[name] = { type: \"minLength\", ref };\n      return formError;\n    }\n    if (maxLength && String(value.length).trim() > maxLength) {\n      formError[name] = { type: \"maxLength\", ref };\n      return formError;\n    }\n    if (pattern && !RegExp(pattern).test(value)) {\n      formError[name] = { type: \"pattern\", ref };\n      return formError;\n    }\n\n    return formError;\n  };\n\n  const getValue = (fieldName = \"\") => {\n    let formValue = formFields.current.find(({ name }) => {\n      return fieldName === name;\n    });\n    return formValue ? formValue?.ref.value : \"\";\n  };\n\n  const setValue = (fieldName) => {\n    console.log(fieldName);\n  };\n\n  const setError = (fieldName) => {\n    console.log(fieldName);\n  };\n\n  const clearError = (fieldName) => {\n    console.log(fieldName);\n  };\n\n  const reset = () => {\n    formFields.current.forEach(({ ref }) => {\n      ref.value = \"\";\n    });\n  };\n\n  return {\n    errors: errors,\n    register: register,\n    handleSubmit: handleSubmit,\n    getValue: getValue,\n    setValue: setValue,\n    reset: reset,\n    setError: setError,\n    clearError: clearError,\n  };\n};\n"],"names":["useForm","formFields","useRef","validate","formFieldsByName","useState","errors","setErrors","useEffect","document","addEventListener","handleChange","removeEventListener","register","useCallback","required","minLength","maxLength","isNumber","pattern","ref","name","current","includes","push","rules","target","value","formError","handleValidate","Object","keys","length","prev","find","String","trim","type","RegExp","test","handleSubmit","cb","formErrors","reduce","initial","data","forEach","parseInt","getValue","fieldName","formValue","setValue","console","log","reset","setError","clearError"],"sourceRoot":""}