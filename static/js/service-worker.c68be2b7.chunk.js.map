{"version":3,"file":"static/js/service-worker.c68be2b7.chunk.js","mappings":"8LAeAA,EAAAA,EAAAA,OAMAC,EAAAA,EAAAA,IAAiBC,KAAKC,eAKtB,IAAMC,EAAsB,IAAIC,OAAO,qBACvCC,EAAAA,EAAAA,KAEE,YAAuB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAEV,MAAqB,aAAjBD,EAAQE,QAIRD,EAAIE,SAASC,WAAW,QAIxBH,EAAIE,SAASE,MAAMR,OAMzBS,EAAAA,EAAAA,IAAwBC,kCAK1BR,EAAAA,EAAAA,KAEE,gBAAGE,EAAH,EAAGA,IAAH,OAAaA,EAAIO,SAAWb,KAAKc,SAASD,QAAUP,EAAIE,SAASO,SAAS,UAC1E,IAAIC,EAAAA,GAAqB,CACvBC,UAAW,SACXC,QAAS,CAGP,IAAIC,EAAAA,EAAiB,CAAEC,WAAY,SAOzCpB,KAAKqB,iBAAiB,WAAW,SAACC,GAC5BA,EAAMC,MAA4B,iBAApBD,EAAMC,KAAKC,MAC3BxB,KAAKyB","sources":["service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n\n// This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\n\nimport { clientsClaim } from 'workbox-core';\nimport { ExpirationPlugin } from 'workbox-expiration';\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\nimport { registerRoute } from 'workbox-routing';\nimport { StaleWhileRevalidate } from 'workbox-strategies';\n\nclientsClaim();\n\n// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);\n\n// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(\n  // Return false to exempt requests from being fulfilled by index.html.\n  ({ request, url }) => {\n    // If this isn't a navigation, skip.\n    if (request.mode !== 'navigate') {\n      return false;\n    } // If this is a URL that starts with /_, skip.\n\n    if (url.pathname.startsWith('/_')) {\n      return false;\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\n\n    if (url.pathname.match(fileExtensionRegexp)) {\n      return false;\n    } // Return true to signal that we want to use the handler.\n\n    return true;\n  },\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);\n\n// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(\n  // Add in any other file extensions or routing criteria as needed.\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\n  new StaleWhileRevalidate({\n    cacheName: 'images',\n    plugins: [\n      // Ensure that once this runtime cache reaches a maximum size the\n      // least-recently used images are removed.\n      new ExpirationPlugin({ maxEntries: 50 }),\n    ],\n  })\n);\n\n// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n});\n\n// Any other custom service worker logic can go here.\n"],"names":["clientsClaim","precacheAndRoute","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","registerRoute","request","url","mode","pathname","startsWith","match","createHandlerBoundToURL","process","origin","location","endsWith","StaleWhileRevalidate","cacheName","plugins","ExpirationPlugin","maxEntries","addEventListener","event","data","type","skipWaiting"],"sourceRoot":""}